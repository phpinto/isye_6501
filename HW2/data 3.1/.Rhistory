length(classifiers)
length(classifiers)
nrow(classifiers)
#scalling data
scdata = matrix(nrow=nrow(classifiers), ncol=4)
for (i in (1 : length(classifiers))) {
scdata[,i] <- (classifiers[,i]-min(classifiers[,i]))/(max(classifiers)-min(classifiers[,i]))
}
scdata
class
classifiers
results = matrix(nrow=nrow(classifiers), ncol=seq(from = 1, to = k_max))
results
results = matrix(nrow=nrow(classifiers), ncol=seq(from = 1, to = k_max))
#trying different k values
k_max = 10
results = matrix(nrow=nrow(classifiers), ncol=seq(from = 1, to = k_max))
results
ncol
seq(from = 1, to = k_max))
seq(from = 1, to = k_max)
results = matrix(nrow=nrow(classifiers), ncol=length(seq(from = 1, to = k_max)))
results
models[,i] <- kmeans(scale_data[,1:4], i, nstart = 20)
#scalling data
scale_data = matrix(nrow=nrow(classifiers), ncol=4)
for (i in (1 : length(classifiers))) {
scale_data[,i] <- (classifiers[,i]-min(classifiers[,i]))/(max(classifiers)-min(classifiers[,i]))
}
#trying different k values
k_max = 10
models = matrix(nrow=nrow(classifiers), ncol=length(seq(from = 1, to = k_max)))
for (i in (1 : length(classifiers))) {
models[,i] <- kmeans(scale_data[,1:4], i, nstart = 20)
}
length(classifiers))
length(classifiers)
#trying different k values
k_max = 10
models = matrix(nrow=nrow(classifiers), ncol=length(seq(from = 1, to = k_max)))
for (i in (1 : llength(seq(from = 1, to = k_max))) {
#trying different k values
k_max = 10
models = matrix(nrow=nrow(classifiers), ncol=length(seq(from = 1, to = k_max)))
for (i in (1 : length(seq(from = 1, to = k_max)))) {
models[,i] <- kmeans(scale_data[,1:4], i, nstart = 20)
}
#trying different k values
k_max = 10
models = matrix(nrow=nrow(classifiers), ncol=k_max)
for (i in (1 : k_max)) {
models[,i] <- kmeans(scale_data[,1:4], i, nstart = 20)
}
k_max
models
models <- kmeans(scale_data[,1:4], i, nstart = 20)
#trying different k values
k_max = 10
models = matrix(nrow=nrow(classifiers), ncol=k_max)
for (i in (1 : k_max)) {
models <- kmeans(scale_data[,1:4], i, nstart = 20)
}
model <- kmeans(scale_data[,1:4], 3, nstart = 20)
model
model$cluster
model$cluster
model <- kmeans(scale_data[,1:4], 3, nstart = 20)
#trying different k values
k_max = 10
cluster = matrix(nrow=nrow(classifiers), ncol=k_max)
center = matrix(nrow=nrow(classifiers), ncol=k_max)
for (i in (1 : k_max)) {
models <- kmeans(scale_data[,1:4], i, nstart = 20)
center[,i] <- models$cluster
}
center
model <- kmeans(scale_data[,1:4], 3, nstart = 20)
#trying different k values
k_max = 10
cluster = matrix(nrow=nrow(classifiers), ncol=k_max)
center = matrix(nrow=nrow(classifiers), ncol=k_max)
for (i in (1 : k_max)) {
models <- kmeans(scale_data[,1:4], i, nstart = 20)
center[,i] <- models$center
cluster[,i] <- models$cluster
}
model <- kmeans(scale_data[,1:4], 3, nstart = 20)
#trying different k values
k_max = 10
cluster = matrix(nrow=nrow(classifiers), ncol=k_max)
center = matrix(nrow=nrow(classifiers), ncol=k_max)
for (i in (1 : k_max)) {
models <- kmeans(scale_data[,1:4], i, nstart = 20)
center[,i] <- models$center
#cluster[,i] <- models$cluster
}
model <- kmeans(scale_data[,1:4], 3, nstart = 20)
#trying different k values
k_max = 10
cluster = matrix(nrow=nrow(classifiers), ncol=k_max)
center = matrix(nrow=nrow(classifiers), ncol=k_max)
for (i in (1 : k_max)) {
models <- kmeans(scale_data[,1:4], i, nstart = 20)
#center[,i] <- models$center
cluster[,i] <- models$cluster
}
model
#trying different k values
k_max = 10
cluster = matrix(nrow=nrow(classifiers), ncol=k_max)
center = matrix(nrow=nrow(classifiers), ncol=k_max)
for (i in (1 : k_max)) {
models <- kmeans(scale_data[,1:4], i, nstart = 20)
center[,i] <- models$centers
cluster[,i] <- models$cluster
}
center
center
model <- kmeans(scale_data[,1:4], 3, nstart = 20)
model$centers
model <- kmeans(scale_data[,1:4], 3, nstart = 20)
#trying different k values
k_max = 10
cluster = matrix(nrow=3, ncol=k_max)
center = matrix(nrow=nrow(classifiers), ncol=k_max)
for (i in (1 : k_max)) {
models <- kmeans(scale_data[,1:4], i, nstart = 20)
center[,i] <- models$center
cluster[,i] <- models$cluster
}
model <- kmeans(scale_data[,1:4], 3, nstart = 20)
model$centers
length(classifiers)
#trying different k values
k_max = 10
cluster = matrix(nrow=k_max, ncol=length(classifiers))
center = matrix(nrow=nrow(classifiers), ncol=k_max)
for (i in (1 : k_max)) {
models <- kmeans(scale_data[,1:4], i, nstart = 20)
center[i,] <- models$center
cluster[,i] <- models$cluster
}
#trying different k values
k_max = 10
center = matrix(nrow=k_max, ncol=length(classifiers))
cluster = matrix(nrow=nrow(classifiers), ncol=k_max)
for (i in (1 : k_max)) {
models <- kmeans(scale_data[,1:4], i, nstart = 20)
center[i,] <- models$center
cluster[,i] <- models$cluster
}
center
#trying different k values
k_max = 10
center = matrix(nrow=k_max*3, ncol=length(classifiers))
cluster = matrix(nrow=nrow(classifiers), ncol=k_max)
for (i in (1 : k_max)) {
models <- kmeans(scale_data[,1:4], i, nstart = 20)
center[i,] <- models$center
cluster[,i] <- models$cluster
}
center
cluster
model <- kmeans(scale_data[,1:4], 2, nstart = 20)
model
model$centers
model <- kmeans(scale_data[,1:4], 2, nstart = 20)
model$centers
#trying different k values
k_max = 10
center = matrix(nrow=k_max*length(classifiers), ncol=length(classifiers))
cluster = matrix(nrow=nrow(classifiers), ncol=k_max)
for (i in (1 : k_max)) {
models <- kmeans(scale_data[,1:4], i, nstart = 20)
center[i,] <- models$center
cluster[,i] <- models$cluster
}
center
model$centers[model$cluster[1],]
model <- kmeans(scale_data[,1:4], 2, nstart = 20)
model$centers[model$cluster[1],]
model$cluster
model$centers[model$cluster[1],]
model$centers
10+9+8+7+6+5+4+3+2+1
center = matrix(nrow=55, ncol=length(classifiers))
cluster = matrix(nrow=nrow(classifiers), ncol=k_max)
for (i in (1 : k_max)) {
models <- kmeans(scale_data[,1:4], i, nstart = 20)
center[i,] <- models$center
cluster[,i] <- models$cluster
}
center
model <- kmeans(scale_data[,1:4], 1, nstart = 20)
model$centers
center = matrix(nrow=55, ncol=length(classifiers))
center
for (i in (1 : k_max)) {
models <- kmeans(scale_data[,1:4], i, nstart = 20)
center[i,] <- models$center
cluster[,i] <- models$cluster
}
center[length(i),] <- models$center
for (i in (1 : k_max)) {
models <- kmeans(scale_data[,1:4], i, nstart = 20)
center[length(i),] <- models$center
cluster[,i] <- models$cluster
}
length(i)
model$centers[model$cluster[1],]
distance[,i] <- model$centers[model$cluster[i],]
model <- kmeans(scale_data[,1:4], 1, nstart = 20)
model$centers
model$centers[model$cluster[1],]
model$centers
#trying different k values
k_max = 10
distance =matrix(nrow=nrow(classifiers), ncol=k_max)
cluster = matrix(nrow=nrow(classifiers), ncol=k_max)
for (i in (1 : k_max)) {
models <- kmeans(scale_data[,1:4], i, nstart = 20)
cluster[,i] <- models$cluster
distance[,i] <- model$centers[model$cluster[i],]
}
distance
model$centers[model$cluster,]
model$centers[model$cluster[1],]
model$centers[model$cluster[2],]
model$centers[model$cluster[3],]
distance
model <- kmeans(scale_data[,1:4], 1, nstart = 20)
model$centers
model$centers[model$cluster[3],]
model$centers
#trying different k values
k_max = 10
distance =matrix(nrow=nrow(classifiers), ncol=k_max)
cluster = matrix(nrow=nrow(classifiers), ncol=k_max)
for (i in (1 : k_max)) {
models <- kmeans(scale_data[,1:4], i, nstart = 20)
cluster[,i] <- models$cluster
distance[,i] <- models$centers[models$cluster[i],]
}
distance
models$centers[models$cluster[i],]
cluster
cluster = matrix(nrow=k_max, nrow(classifiers)
distance = matrix(nrow=k_max, nrow(classifiers))
distance = matrix(nrow=k_max, ncol=(classifiers))
distance = matrix(nrow=k_max, ncol=length(classifiers))
distance
distance[i,] <- models$centers[models$cluster[i],]
for (i in (1 : k_max)) {
models <- kmeans(scale_data[,1:4], i, nstart = 20)
cluster[,i] <- models$cluster
distance[i,] <- models$centers[models$cluster[i],]
}
distance
distance
cluster
names(model)
model$tot.withinss
?kmeans
model <- kmeans(scale_data[,1:4], 1, nstart = 20)
model$centers
model$centers[model$cluster[3],]
model$centers
names(model)
model$tot.withinss
?kmeans
#trying different k values
k_max = 10
cluster = matrix(nrow=nrow(classifiers), ncol=k_max)
distance = matrix(nrow=k_max, ncol=length(classifiers))
total_withincluster = matrix(nrow=1, ncol=k_max)
for (i in (1 : k_max)) {
models <- kmeans(scale_data[,1:4], i, nstart = 20)
cluster[,i] <- models$cluster
distance[i,] <- models$centers[models$cluster[i],]
total_withincluster[i,] <- models$total_withincluster
}
model <- kmeans(scale_data[,1:4], 1, nstart = 20)
model$centers
model$centers[model$cluster[3],]
model$centers
names(model)
model$tot.withinss
?kmeans
#trying different k values
k_max = 10
cluster = matrix(nrow=nrow(classifiers), ncol=k_max)
distance = matrix(nrow=k_max, ncol=length(classifiers))
total_withincluster = matrix(nrow=1, ncol=k_max)
for (i in (1 : k_max)) {
models <- kmeans(scale_data[,1:4], i, nstart = 20)
cluster[,i] <- models$cluster
distance[i,] <- models$centers[models$cluster[i],]
total_withincluster[,i] <- models$total_withincluster
}
models$total_withincluster
model <- kmeans(scale_data[,1:4], 1, nstart = 20)
model$centers
model$centers[model$cluster[3],]
model$centers
names(model)
model$tot.withinss
?kmeans
#trying different k values
k_max = 10
cluster = matrix(nrow=nrow(classifiers), ncol=k_max)
distance = matrix(nrow=k_max, ncol=length(classifiers))
total_withincluster = matrix(nrow=1, ncol=k_max)
for (i in (1 : k_max)) {
models <- kmeans(scale_data[,1:4], i, nstart = 20)
cluster[,i] <- models$cluster
distance[i,] <- models$centers[models$cluster[i],]
total_withincluster[,i] <- models$tot.withinss
}
total_withincluster
plot(1:k_max,total_withincluster, type= "b", xlab = "Number of clusters(k)", ylab = "Within cluster sum of squares")
iris.class
table(cluster,class)
cluster
class
table(cluster[3],class)
cluster[3]
table(cluster[,3],class)
table(cluster[,2],class)
table(cluster[,4],class)
table(cluster[,5],class)
#plotting the classifications for k = 3
table(cluster[,3],class)
#plotting the classifications for k = 3
table(cluster[,1],class)
#plotting the classifications for k = 3
table(cluster[,3],class)
ggplot(iris, aes(Petal.Length, Petal.Width, color = iris$cluster[,3])) + geom_point() + ggtitle("2 Variables")
ggplot(iris, aes(Petal.Length, Petal.Width, color = iris$cluster[,3])) + geom_point() + ggtitle("2 Variables")
cluster[,3] <- as.factor(cluster[,3])
ggplot(iris, aes(Petal.Length, Petal.Width, color = iris$cluster[,3])) + geom_point() + ggtitle("2 Variables")
library(colorspace)
ggplot(iris, aes(Petal.Length, Petal.Width, color = iris$cluster[,3])) + geom_point() + ggtitle("2 Variables")
set.seed(20)
cluster[,3] <- as.factor(cluster[,3])
ggplot(iris, aes(Petal.Length, Petal.Width, color = iris$cluster[,3])) + geom_point() + ggtitle("2 Variables")
cluster[,3] <- as.factor(cluster[,3])
ggplot(iris, aes(Petal.Length, Petal.Width, color = iris$cluster[,3])) + geom_point() + ggtitle("2 Variables")
set.seed(20)
kc4<-kmeans(iris[,c(1:4)],3)
iris$cluster4 <- as.factor(kc4$cluster)
ggplot(iris, aes(Petal.Length, Petal.Width, color = iris$cluster4)) + geom_point() + ggtitle("4 Variables & Seed 20")
ggplot(iris, aes(Petal.Length, Petal.Width, color = cluster[,3])) + geom_point() + ggtitle("4 Variables & Seed 20")
iris$cluster4
cluster[,3]
iris$cluster4
ggplot(iris, aes(Petal.Length, Petal.Width, color = cluster[,3])) + geom_point() + ggtitle("4 Variables & Seed 20")
cluster[,3]
model<-kmeans(iris[,c(1:4)],3)
iris$cluster[,3] <- as.factor(model$cluster[,3])
cluster[,3])<- as.factor(cluster[,3])
cluster[,3]<- as.factor(cluster[,3])
ggplot(iris, aes(Petal.Length, Petal.Width, color = cluster[,3])) + geom_point() + ggtitle("4 Variables & Seed 20")
cluster[,3]
cluster[,3]<- as.factor(cluster[,3])
cluster[,3]
cluster[,3]<- factor(cluster[,3])
cluster[,3]
ggplot(iris, aes(Petal.Length, Petal.Width, color = cluster[,3])) + geom_point() + ggtitle("4 Variables & Seed 20")
ggplot(iris, aes(Petal.Length, Petal.Width, color = as.factor(cluster[,3]))) + geom_point() + ggtitle("4 Variables & Seed 20")
ggplot(iris, aes(Petal.Length, Petal.Width, color = as.factor(cluster[,3]))) + geom_point() + ggtitle("4 Variables & Seed 20")
#model with k = 3
model <- kmeans(scale_data[,1:4], 3, nstart = 20)
model
ggplot(iris, aes(Sepal.Width, Petal.Width, color = as.factor(cluster[,3]))) + geom_point() + ggtitle("3 clusters with all variables")
ggplot(iris, aes(Petal.Width, Sepal.Width, color = as.factor(cluster[,3]))) + geom_point() + ggtitle("3 clusters with all variables")
ggplot(iris, aes(Petal.Length, Petal.Width, color = as.factor(cluster[,3]))) + geom_point() + ggtitle("3 clusters with all variables", shape=Species)
ggplot(iris, aes(Petal.Length, Petal.Width, color = as.factor(cluster[,3]), shape=Species)) + geom_point() + ggtitle("3 clusters with all variables")
ggplot(iris, aes(Petal.Length, Petal.Width, color = as.factor(cluster[,3]), shape=Species)) + geom_point() + ggtitle("3 clusters with all variables")
ggplot(iris, aes(Petal.Width, Sepal.Width, color = as.factor(cluster[,3]), shape=Species)) + geom_point() + ggtitle("3 clusters with all variables")
(50+41+35)/(50+41+9+15+35)
table(cluster[,4],class)
model <- kmeans(scale_data[,1:4], 4, nstart = 20)
model
table(cluster[,4],class)
(50+27+23+33+14)/(50+27+23+33+14+3)
(50+27+23+33)/(50+27+23+33+14+3)
#not scaled data k = 3
model <- kmeans(iris[,1:4], 3, nstart = 20)
model
#not scaled data k = 3
model <- kmeans(iris[,1:4], 4, nstart = 20)
model
#ftting the model with the defined train control
model <- train(R1 ~ A1 + A2 + A3 + A8 + A9 + A10 + A11 + A12 + A14 + A15,
method     = "knn",
trControl  = trControl,
metric     = "Accuracy",
data       = credit_card,
preProcess = c("center", "scale"),
tuneLength = 30)
model
plot(model)
# Fitting model with multiple k values
best_parameter = as.integer(model$best.parameters[2]$k)
best_parameter
model
#best parameters
best_parameter = which.max(model[1])
best_parameter
which.max(model[1])
which.max(model[,1])
model
model[1]
names(model)
model$bestTune
model$bestTune
model$"bestTune"
model
model$results
model$results[1]
model$results[1]
model$results[1]
model$results[,1]
model$results[,2]
#best parameters
best_parameter = which.max(model$results[,2])
best_parameter
model$results[,2]
model$results[best_parameter,1]
model$results[best_parameter,2]
#plotting results
cat("\n The best value of k is K = ", k, " with accuracy = ",  accuracy)
#best parameters
index = which.max(model$results[,2])
accuracy = model$results[index,2]
k = model$results[index,1]
#plotting results
cat("\n The best value of k is K = ", k, " with accuracy = ",  accuracy)
#plotting clusters for petal length and petal width
ggplot(iris, aes(Petal.Length, Petal.Width, color = as.factor(cluster[,4]), shape=Species)) + geom_point() + ggtitle("3 clusters with Petal Width and Petal Length")
v_accuracy
v_accuracy
max(v_accuracy,na.rm = TRUE)
match(c(max(v_accuracy,na.rm = TRUE)),v_accuracy)
v_accuracy
number
accuracy
round(v_accuracy,4)
accuracy
best_parameter
model$best.parameters[2]$k
# setting seed for reproducibility
set.seed(123)
# Fitting model with multiple k values
model <- train.kknn(R1~.,credit_card,kmax=30,scale=TRUE)
best_parameter = as.integer(model$best.parameters[2]$k)
min_error = model$MISCLASS[best_parameter]
accuracy = (1 - min_error)
cat("\n The best value of k is K = ", best_parameter, " with accuracy = ",  accuracy)
#outputting the results
plot(model)
model$best.parameters[2]$k
model
names(model)
model$best.parameters
model$best.parameters[2]$k
model$best.parameters[1]
model$best.parameters[2]
model$best.parameters
model$best.parameters[2]
model$best.parameters[2][1]
?kmeans
#creating a Within Cluster plot
plot(1:k_max,total_withincluster, type= "b", xlab = "Number of clusters(k)", ylab = "Within cluster sum of squares")
#plotting clusters for petal length and petal width
ggplot(iris, aes(Petal.Length, Petal.Width, color = as.factor(cluster[,3]), shape=Species)) + geom_point() + ggtitle("3 clusters with Petal Width and Petal Length")
#plotting the classifications for k = 3 with cluster vector
table(cluster[,3],class)
table(cluster[,4],class)
#model with k = 3
model <- kmeans(scale_data[,1:4], 4, nstart = 20)
model
table(cluster[,4],class)
#model with k = 3
model <- kmeans(scale_data[,1:4], 3, nstart = 20)
model
plot(model_2)
ggplot(accuracy, aes(x=k, y=accuracy)) +
geom_point(color = "#159957") +
ggtitle("Accuracy levels for different k values")
# setting seed for reproducibility
set.seed(123)
# looping through different numbers of neighbors to find the perfect number using cv.kknn for crossvalidation
v_accuracy <- vector()
for (k in 1:30){
pred <- c()
knn <- cv.kknn(R1 ~ .,credit_card , k = k, kcv = 10,  scale=TRUE)
pred <- c(pred, as.integer(knn[[1]][,2])-1) # rounding prediction to either one or zero
accuracy <- sum(pred == credit_card[,11]) / nrow(credit_card)
cat("\n For K = ", k, "accuracy = ", accuracy, "\n")
v_accuracy <- c(v_accuracy,accuracy)
}
#best accuracy
cat("\n The best value of k is K = ", match(c(max(v_accuracy,na.rm = TRUE)),v_accuracy), " with accuracy = ", max(v_accuracy,na.rm = TRUE), "\n")
#outputting the results
number <-  seq((1: length(v_accuracy)))
accuracy <- cbind(round(v_accuracy,4), number)
colnames(accuracy) <- c("accuracy","k")
accuracy <- as.data.frame(accuracy)
ggplot(accuracy, aes(x=k, y=accuracy)) +
geom_point(color = "#159957") +
ggtitle("Accuracy levels for different k values")
